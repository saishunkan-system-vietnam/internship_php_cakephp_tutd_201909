<?php

namespace App\Controller;

use App\Controller\AppController;

/**
 * Products Controller
 *
 * @property \App\Model\Table\ProductsTable $Products
 *
 * @method \App\Model\Entity\Product[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class ProductsController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('Products');
        $this->loadModel('Categories');
    }

    public function index()
    {
        $this->paginate = [
            'limit' => 5
        ];
        $products = $this->paginate($this->Products->find()->order(['id' => 'DESC']));
        $data = $this->Products->find()->select([
            'id',
            'product_name',
            'image',
            'price',
            'sale',
            'description',
            'size', 'slug',
            'status',
            'categories.name'
        ])->join([
            'table' => 'categories',
            'alias' => 'categories',
            'type' => 'left',
            'conditions' => 'products.categories_id = categories.id'
        ])->all();
        $this->set(compact('products'));
        $this->set('data', $data);
    }

    public function add()
    {
        $products = $this->Products->newEntity();
        $product = $this->Products->find()->all();
        $catee = $this->Categories->find()->all()->toArray();
        if ($this->request->is('post')) {
            $input['product_name'] = $this->getRequest()->getData('product_name');
            $input['price'] = $this->getRequest()->getData('price');
            $input['sale'] = $this->getRequest()->getData('sale');
            $input['description'] = $this->getRequest()->getData('description');
            $input['size'] = $this->getRequest()->getData('size');
            $input['slug'] = $this->getRequest()->getData('slug');
            $input['status'] = $this->getRequest()->getData('status');
            $input['categories_id'] = $this->getRequest()->getData('categories_id');
            $uploaded_path = "/img/upload";
            $tmp_name = $this->request->getData()['file']['tmp_name'];
            $image_name = $this->request->getData()['file']['name'];
            $setNewFileName = time() . "_" . rand(000000, 999999) . $image_name;
            if (move_uploaded_file($tmp_name, WWW_ROOT . $uploaded_path . "/" . $setNewFileName)) {
                $products->image = $uploaded_path . "/" . $setNewFileName;
            }
//            dd($input);
            $this->Products->patchEntity($products, $input);

            if ($this->Products->save($products)) {
                $this->set(compact('products'));
                return $this->redirect(['controller' => 'Products', 'action' => 'index']);

            } else {
                $error = $products->getErrors();
//                dd($error);
                $this->set('err', $error);
            }
        }
        $this->set(compact('products'));
        $this->set(compact('product'));
        $this->set(compact('catee'));
    }

    public function edit()
    {
        $id = $this->request->getParam('id');
        $products = $this->Products->get($id);
        $this->set('products', $products);
        $product = $this->Products->find()->all()->toArray();
        $catee = $this->Categories->find()->all()->toArray();
        if ($this->request->is('post')) {
            $input['product_name'] = $this->getRequest()->getData('product_name');
            $input['price'] = $this->getRequest()->getData('price');
            $input['sale'] = $this->getRequest()->getData('sale');
            $input['description'] = $this->getRequest()->getData('description');
            $input['size'] = $this->getRequest()->getData('size');
            $input['slug'] = $this->getRequest()->getData('slug');
            $input['status'] = $this->getRequest()->getData('status');
            $input['categories_id'] = $this->getRequest()->getData('categories_id');
            $uploaded_path = "/img/upload";
            $tmp_name = $this->request->getData()['file']['tmp_name'];
            $image_name = $this->request->getData()['file']['name'];
            $setNewFileName = time() . "_" . rand(000000, 999999) . $image_name;
            if (move_uploaded_file($tmp_name, WWW_ROOT . $uploaded_path . "/" . $setNewFileName)) {
                $products->image = $uploaded_path . "/" . $setNewFileName;
            }

            $this->Products->patchEntity($products, $input);
            if ($this->Products->save($products)) {
                $this->set(compact('products'));
                return $this->redirect(['controller' => 'Products', 'action' => 'index']);
            } else {
                $error = $products->getErrors();
                $this->set('err', $error);
            }
        }
        $this->set(compact('products'));
        $this->set(compact('product'));
        $this->set(compact('catee'));
    }

    public function delete()
    {
        $id = $this->request->getParam('id');
        $products = $this->Products->get($id);
        $this->Products->delete($products);
        return $this->redirect(['controller' => 'Products', 'action' => 'index']);
    }

    public function search()
    {
        $search = $this->request->getQuery('q');
        $this->paginate = [
            'limit' => '3'
        ];

        $data = $this->paginate($this->Products->find()->where(function ($exp, $query) use ($search) {
            return $exp->like('product_name', '%' . $search . '%');
        }));
        $this->set('data', $data);
        $this->set('search', $search);
    }
}
