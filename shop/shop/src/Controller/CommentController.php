<?php

namespace App\Controller;

use App\Controller\AppController;
use App\Model\Entity\Comment;
/**
 * Comment Controller
 *
 * @property \App\Model\Table\CommentTable $Comment
 *
 * @method \App\Model\Entity\Comment[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class CommentController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('Comment');
    }

    public function index()
    {
        $this->paginate = [
            'limit' => '5'
        ];
        $comment = $this->paginate($this->Comment->find()->order(['id' => 'DESC']));
        $this->set(compact('comment'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $comment = $this->Comment->newEntity();
        if ($this->request->is('post')) {
            $uploaded_path = "/img/upload";
            $tmp_name = $this->request->getData()['file']['tmp_name'];
            $image_name = $this->request->getData()['file']['name'];
            $setNewFileName = time() . "_" . rand(000000, 999999) . $image_name;
            $input['name'] = $this->getRequest()->getData('name');
            $input['text'] = $this->getRequest()->getData('text');
            $input['status'] = $this->getRequest()->getData('status');
            if (move_uploaded_file($tmp_name, WWW_ROOT . $uploaded_path . "/" . $setNewFileName)) {
                $comment->image = $uploaded_path . "/" . $setNewFileName;
            }

            $this->Comment->patchEntity($comment, $input);
            if ($this->Comment->save($comment)) {
                $this->set(compact('comment'));
                return $this->redirect(['controller' => 'Comment', 'action' => 'index']);
            } else {
                $error = $comment->getErrors();
                $this->set('err', $error);
            }
        }
        $this->set(compact('comment'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Comment id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit()
    {
        $id = $this->request->getParam('id');
        $comment = $this->Comment->get($id);
        $this->set('comment', $comment);
        if ($this->request->is('post')) {
            $uploaded_path = "/img/upload";
            $tmp_name = $this->request->getData()['file']['tmp_name'];
            $image_name = $this->request->getData()['file']['name'];
            $setNewFileName = time() . "_" . rand(000000, 999999) . $image_name;
            $input['name'] = $this->getRequest()->getData('name');
            $input['text'] = $this->getRequest()->getData('text');
            $input['status'] = $this->getRequest()->getData('status');

            if (move_uploaded_file($tmp_name, WWW_ROOT . $uploaded_path . "/" . $setNewFileName)) {

                $comment->image = $uploaded_path . "/" . $setNewFileName;
            }
            $this->Comment->patchEntity($comment, $input,['validate'=>'updatecomment']);
            if ($this->Comment->save($comment)) {
                $this->set(compact('comment'));
                return $this->redirect(['controller' => 'Comment', 'action' => 'index']);
            } else {
                $error = $comment->getErrors();
                $this->set('err', $error);
            }
        }
        $this->set(compact('comment'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Comment id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete()
    {
        $id = $this->request->getParam('id');
        $comment = $this->Comment->get($id);
        $this->Comment->delete($comment);
        return $this->redirect(['controller' => 'Comment', 'action' => 'index']);
    }
    public function search(){
        $search = $this->request->getQuery('q');
        $this->paginate = [
            'limit' => '3'
        ];
        $comment = $this->paginate($this->Comment->find()->where(function ($exp, $query) use ($search) {
            return $exp->like('name', '%' . $search . '%');
        }));
        $this->set('comment', $comment);
        $this->set('search', $search);
    }
}
