<?php

namespace App\Http\Session;

namespace App\Controller;

use Cake\Event\Event;
use Cake\Cache\Cache;
use App\Controller\AppController;
use Cake\Http\Session;
use Symfony\Component\VarDumper\Dumper\DataDumperInterface;
use function mysql_xdevapi\getSession;

use Cake\Core\Configure;
use Cake\Http\Session\DatabaseSession;
use Cake\Mailer\Email;
use Cake\Mailer\MailerAwareTrait;

class DetailClientController extends AppController
{
    use MailerAwareTrait;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
//     $this->viewBuilder()->getLayout("fontendefault");
        $this->viewBuilder()->setLayout("cartfontend");
        $this->loadModel('Logo');
        $this->loadModel('Slider');
        $this->loadModel('Represent');
        $this->loadModel('Categories');
        $this->loadModel('Products');
        $this->loadModel('Shopon');
        $this->loadModel('Logolast');
        $this->loadModel('Usersclient');
        $this->loadModel('Contact');
        $this->loadModel('Orders');
    }


    public function detaill()
    {
        $id = $this->request->getParam('id');
//        $products = $this->Products->find()
//            ->select(['id', 'image', 'product_name', 'price', 'sale', 'description', 'size'])
//            ->where(['id' => 23])
//            ->first()->toArray();
        $products = $this->Products->get($id);
        $this->set('products', $products);

//        $relate = $this->Products->find()

        $relate = $this->Products->find()
            ->where(['id'])
            ->order(['id' => 'DESC'])
            ->limit(4)
            ->toArray();
        $this->set('relate', $relate);
//        dd($products);
    }

    public function addToCart()
    {
//        $this->getRequest()->getSession()->delete('cart');
        $id = $this->request->getParam('id');
        $product = $this->Products->get($id);
        if (!empty($product)) {
            //get gio hang hien tai
            if ($this->getRequest()->getSession()->check('cart')) {
                $dataCart = $this->getRequest()->getSession()->read('cart');
            } else {
                $dataCart = array();
            }
            if (empty($dataCart)) {
                $dataCart[count($dataCart)] = array(
                    'id' => $product['id'],
                    'name' => $product['product_name'],
                    'sale' => $product['sale'],
                    'slug' => $product['slug'],
                    'image' => $product['image'],
                    'quantity' => 1,
                );
            } else {
                $flg_new = true;
                $iUpdate = 0;
                for ($i = 0; $i < count($dataCart); $i++) {
                    if ($dataCart[$i]['id'] == $id) {
                        $flg_new = false;
                        $iUpdate = $i;
                        break;
                    }
                }
                if ($flg_new) {
                    $dataCart[count($dataCart)] = array(
                        'id' => $product['id'],
                        'name' => $product['product_name'],
                        'sale' => $product['sale'],
                        'slug' => $product['slug'],
                        'image' => $product['image'],
                        'quantity' => 1,
                    );
                } else {
                    $dataCart[$iUpdate]['quantity'] += 1;
                }
            }

            //check gio hang neu co roi thi them so luong, chua co the them moi

            //thuc hien add them san pham vao gio

            //            );
            //            dd($item);
            //tao gio hang va them san phamm vao trong gio hang
            //tao session
//            Cache::write('cart',$dataCart);
//            $session = $this->getRequest()->getSession();

            $this->getRequest()->getSession()->write('cart', $dataCart);
            //$this->getRequest()->getSession()->setFlash('Add thanh cong', 'default', array('class' => 'alert alert-info'), 'cart');
//            $this->redirect($this->referer());
//            pr($this->getRequest()->getSession()->read('cart'));
            $cart = $this->getRequest()->getSession()->read('cart');
//            dd($dataCart[$iUpdate]['quantity']);

            $total = 0;
            foreach ($cart as $product) {
//                dd($dataCart[$iUpdate]['quantity']);
//                dd($product['quantity']);
                $total += $product['quantity'] * $product['sale'];
            }
            $this->getRequest()->getSession()->write('total', $total);
            $this->set(compact('total'));
//            $this->redirect('cart');
        } else {
            echo 'sai id';
        }
//        $this->redirect($this->referer());
    }

    public function viewCart()
    {
//        $this->viewBuilder()->setLayout('cartfontend');
//        dd($_SESSION);
        $this->logo();
        $this->slider();
        $this->represent();
        $this->title();
        $this->logolast();
        $this->users();
        $this->loginclient();
        $this->oders();
//        $this->addToCart();
        $this->showMenu();

        $cart = $this->getRequest()->getSession()->read('cart');
//dd($cart);

        $total = 0;
        if (isset($cart)) {
            foreach ($cart as $product) {
//                dd($dataCart[$iUpdate]['quantity']);
//                dd($product);
                $total += $product['quantity'] * $product['sale'];
            }
        }


        $this->getRequest()->getSession()->write('total', $total);
        $this->set(compact('total'));
        $this->set(compact('cart'));
//        dd($totall);
        $payment = $this->getRequest()->getSession()->read('payment');
//      dd($payment);
        $this->set(compact('cart', 'payment'));
    }

    public function emptycart()
    {
        $this->getRequest()->getSession()->delete('cart');
        $this->getRequest()->getSession()->delete('total');
        $this->getRequest()->getSession()->delete('payment');
        $this->redirect($this->referer());

    }

    public function remove()
    {
        $id = $this->request->getParam('id');
//        $this->getRequest()->getSession()->delete('cart.' . $id);
//        dd($_SESSION['cart']);
        $cart = $this->getRequest()->getSession()->read('cart');
        foreach ($_SESSION['cart'] as $key => $value) {
//            dd($value['id']);
            if ($value['id'] == $id) {
                unset($_SESSION['cart'][$key]);
            }
        }
        if (empty($cart)) {
            $this->emptycart();
        } else {
            $total = 0;
            foreach ($cart as $product) {
//                dd($dataCart[$iUpdate]['quantity']);
//                dd($product['quantity']);
                $total += $product['quantity'] * $product['sale'];
                $this->getRequest()->getSession()->write('total', $total);
            }
            $this->redirect($this->referer());
        }
    }

    public function updatecart()
    {
        $cart = $this->getRequest()->getSession()->read('cart');
        dd($cart);
        $this->redirect('cart');
    }

    public function oders()
    {
        $cart = $this->getRequest()->getSession()->read('cart');
//        dd($cart);
        $total = $this->getRequest()->getSession()->read('total');
//        dd($total);
        $order = $this->Orders->newEntity();
        if ($this->request->is('post')) {
            $input['username'] = $this->getRequest()->getData('username');
            $input['phone'] = $this->getRequest()->getData('phone');
            $input['email'] = $this->getRequest()->getData('email');
            $input['addr'] = $this->getRequest()->getData('addr');
            $input['note'] = $this->getRequest()->getData('note');
            $input['order_info'] = json_encode($this->getRequest()->getSession()->read('cart'));
            $input['total'] = $this->getRequest()->getSession()->read('total');
            $this->Orders->patchEntity($order, $input);
//            dd($order);
            if ($this->Orders->save($order)) {
                $this->set(compact('order'));
                $this->Flash->success(__('ok'));
                $this->set(compact('order'));
                $this->getRequest()->getSession()->delete('cart');
//                $this->sendEmail();
//                dd($order);
                  $email = $this->getMailer('Orders')->send('welcome', [$order]);
//                  dd($this->getMailer('Orders')->send('welcome', [$order]));
//                $emailPhone = $order->phone;
//                $emailTotal = $order->total;
//                $emailUsername = $order->username;
//                $emailAddr = $order->addr;
//                $emailNote = $order->note;
//                $emailEm = $order->email;
//                $emailOrder = $order->order_info;
//                $this->set(compact('emailPhone','emailTotal','emailUsername','emailAddr','emailNote','emailEm','emailOrder'));
//                $this->set(compact('email'));
            } else {
                $error = $order->getErrors();
                dd($error);
                $this->set('err', $error);
            }
        }
        $this->set(compact('order'));


//        $this->redirect($this->emptycart());
    }

//    public function sendEmail()
//    {
//        $email = $this->getMailer('Orders')->send('welcome', [$order]);
//    }

    public function ordervieww()
    {
//        $cart = $this->getRequest()->getSession()->read('cart');
//        dd($cart);

    }

    public function orderview()
    {
        $this->logo();
        $this->slider();
        $this->represent();
        $this->ordervieww();
        $this->logolast();
        $this->users();
        $this->loginclient();

    }

    public function detail()
    {

        $this->logo();
        $this->slider();
        $this->represent();
        $this->title();
        $this->logolast();
        $this->users();
        $this->loginclient();
        $this->detaill();
        $this->addToCart();
        $this->viewCart();
        $this->orderview();
        $this->oders();
        $this->menu();
        $this->showMenu();

    }
}
